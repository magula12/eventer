<%= form_for filter do |f| %>
  <p>
    <%= f.label :name, l(:label_filter_name) %><br>
    <%= f.text_field :name, required: true %>
  </p>

  <h3><%= l(:label_filter_conditions_header) %></h3>
  <p>
    <strong><%= l(:label_filter_conditions) %>:</strong>
    <input type="radio" name="conditions_type" value="and" checked> <%= l(:label_and) %>
    <input type="radio" name="conditions_type" value="or"> <%= l(:label_or) %>
  </p>
  <div id="conditions-container"></div>
  <button type="button" onclick="addCondition('conditions-container')">+ <%= l(:label_add_condition) %></button>

  <h3><%= l(:label_filter_rules_header) %></h3>
  <p>
    <strong><%= l(:label_filter_rules) %>:</strong>
    <input type="radio" name="rules_type" value="and" checked> <%= l(:label_and) %>
    <input type="radio" name="rules_type" value="or"> <%= l(:label_or) %>
  </p>
  <div id="rules-container"></div>
  <button type="button" onclick="addCondition('rules-container')">+ <%= l(:label_add_rule) %></button>

  <%= f.hidden_field :conditions, id: "conditions-hidden" %>

  <p>
    <%= f.submit l(:button_save_filter), class: 'button', onclick: "prepareJson()" %>
    <%= link_to l(:button_back), custom_filters_path, class: 'button' %>
  </p>
<% end %>


<script>
    const validVariables = [
        "category", "start_time", "end_time",
        "assigned_users", "name"
    ];
    const validOperators = ["==", "!=", ">", "<", ">=", "<=", "in", "not in"];

    function createConditionRow(containerId) {
        let container = document.getElementById(containerId);
        let div = document.createElement("div");
        div.classList.add("condition-row");

        // 1) Text input (left)
        let valueInput = document.createElement("input");
        valueInput.type = "text";
        valueInput.placeholder = "<%= j l(:placeholder_variable_or_value) %>";

        // 2) Operator (middle)
        let opSelect = createDropdown(validOperators);

        // 3) Variable dropdown (right)
        let varSelect = createDropdown(validVariables);

        // Logic select
        let logicSelect = document.createElement("select");
        logicSelect.innerHTML = '<option value="none">None</option><option value="and">AND</option><option value="or">OR</option>';

        let removeBtn = document.createElement("button");
        removeBtn.innerText = "❌";
        removeBtn.type = "button";
        removeBtn.onclick = () => div.remove();

        // Append them in the new order: valueInput -> opSelect -> varSelect -> logicSelect -> removeBtn
        div.append(valueInput, opSelect, varSelect, logicSelect, removeBtn);
        container.appendChild(div);
    }

    function createDropdown(options) {
        let select = document.createElement("select");
        options.forEach(opt => {
            let option = document.createElement("option");
            option.value = opt;
            option.innerText = opt;
            select.appendChild(option);
        });
        return select;
    }

    function addCondition(containerId) {
        createConditionRow(containerId);
    }

    function prepareJson() {
        let conditionsType = document.querySelector('input[name="conditions_type"]:checked').value || "and";
        let rulesType = document.querySelector('input[name="rules_type"]:checked').value || "and";

        let conditions = buildNestedLogic("conditions-container", conditionsType);
        let rules = buildNestedLogic("rules-container", rulesType);

        let finalJson = JSON.stringify({ "conditions": conditions, "rules": rules });
        if (!finalJson || finalJson === "{}") {
            finalJson = JSON.stringify({
                "conditions": { "and": [] },
                "rules": { "and": [] }
            });
        }

        document.getElementById("conditions-hidden").value = finalJson;
    }

    function buildNestedLogic(containerId, logicType) {
        let logicGroup = { [logicType]: [] };

        document.querySelectorAll(`#${containerId} > .condition-row`).forEach(row => {
            // [valueInput, opSelect, varSelect, logicSelect, removeBtn]
            let [value, operator, variable, nestedLogicType] = row.querySelectorAll("input, select");

            if (variable.value && operator.value && value.value) {
                // { "operator": [ { "var": variable.value }, value.value ] }
                let condition = {
                    [operator.value]: [
                        { "var": variable.value },
                        value.value
                    ]
                };

                if (nestedLogicType && nestedLogicType.value !== "none") {
                    let nestedLogic = buildNestedLogic(row.id, nestedLogicType.value);
                    logicGroup[logicType].push(nestedLogic);
                } else {
                    logicGroup[logicType].push(condition);
                }
            }
        });

        return logicGroup;
    }
</script>
